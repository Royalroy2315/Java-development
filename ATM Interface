import java.util.ArrayList;
import java.util.Scanner;

// User class to store user details
class User {
    private String userId;
    private String userPin;
    private double balance;

    public User(String userId, String userPin, double initialBalance) {
        this.userId = userId;
        this.userPin = userPin;
        this.balance = initialBalance;
    }

    public String getUserId() {
        return userId;
    }

    public boolean validatePin(String pin) {
        return userPin.equals(pin);
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        } else {
            return false;
        }
    }

    public void transfer(User recipient, double amount) {
        if (withdraw(amount)) {
            recipient.deposit(amount);
        }
    }
}

// Transaction class to store transaction details
class Transaction {
    private String type;
    private double amount;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return type + ": $" + amount;
    }
}

// ATM class for core functionalities
class ATM {
    private User currentUser;
    private ArrayList<Transaction> transactionHistory;

    public ATM() {
        transactionHistory = new ArrayList<>();
    }

    public boolean login(User user, String pin) {
        if (user.validatePin(pin)) {
            currentUser = user;
            return true;
        }
        return false;
    }

    public void showTransactionHistory() {
        if (transactionHistory.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            System.out.println("Transaction History:");
            for (Transaction t : transactionHistory) {
                System.out.println(t);
            }
        }
    }

    public void deposit(double amount) {
        currentUser.deposit(amount);
        transactionHistory.add(new Transaction("Deposit", amount));
        System.out.println("Deposited $" + amount);
    }

    public void withdraw(double amount) {
        if (currentUser.withdraw(amount)) {
            transactionHistory.add(new Transaction("Withdraw", amount));
            System.out.println("Withdrawn $" + amount);
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public void transfer(User recipient, double amount) {
        if (currentUser.getBalance() >= amount) {
            currentUser.transfer(recipient, amount);
            transactionHistory.add(new Transaction("Transfer", amount));
            System.out.println("Transferred $" + amount + " to " + recipient.getUserId());
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public double getBalance() {
        return currentUser.getBalance();
    }

    public void logout() {
        currentUser = null;
        System.out.println("Logged out successfully.");
    }
}

// Main driver class
public class ATMInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Predefined users
        User user1 = new User("user1", "1234", 5000);
        User user2 = new User("user2", "5678", 3000);

        ATM atm = new ATM();
        System.out.println("Welcome to the ATM!");

        // Login Process
        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter PIN: ");
        String userPin = scanner.nextLine();

        User currentUser = null;
        if (user1.getUserId().equals(userId)) {
            currentUser = user1;
        } else if (user2.getUserId().equals(userId)) {
            currentUser = user2;
        }

        if (currentUser != null && atm.login(currentUser, userPin)) {
            System.out.println("Login successful!");

            while (true) {
                System.out.println("\nATM Menu:");
                System.out.println("1. Transaction History");
                System.out.println("2. Withdraw");
                System.out.println("3. Deposit");
                System.out.println("4. Transfer");
                System.out.println("5. Quit");
                System.out.print("Choose an option: ");

                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        atm.showTransactionHistory();
                        break;
                    case 2:
                        System.out.print("Enter amount to withdraw: ");
                        double withdrawAmount = scanner.nextDouble();
                        atm.withdraw(withdrawAmount);
                        break;
                    case 3:
                        System.out.print("Enter amount to deposit: ");
                        double depositAmount = scanner.nextDouble();
                        atm.deposit(depositAmount);
                        break;
                    case 4:
                        System.out.print("Enter recipient User ID: ");
                        scanner.nextLine(); // Consume newline
                        String recipientId = scanner.nextLine();
                        User recipient = recipientId.equals(user2.getUserId()) ? user2 : user1;

                        System.out.print("Enter amount to transfer: ");
                        double transferAmount = scanner.nextDouble();
                        atm.transfer(recipient, transferAmount);
                        break;
                    case 5:
                        atm.logout();
                        scanner.close();
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        } else {
            System.out.println("Invalid credentials.");
        }
    }
}
